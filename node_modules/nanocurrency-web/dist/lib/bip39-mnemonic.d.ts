export default class Bip39Mnemonic {
    /**
     * Creates a BIP39 wallet
     *
     * @param {string} [entropy] - (Optional) the entropy to use instead of generating
     * @returns {MnemonicSeed} The mnemonic phrase and a seed derived from the (generated) entropy
     */
    static createWallet: (entropy: string, password: string) => MnemonicSeed;
    /**
     * Creates an old Nano wallet
     *
     * @param {string} seed - (Optional) the seed to be used for the wallet
     * @returns {MnemonicSeed} The mnemonic phrase and a generated seed if none provided
     */
    static createLegacyWallet: (seed?: string) => MnemonicSeed;
    static deriveMnemonic: (entropy: string) => string;
    /**
     * Validates a mnemonic phrase
     *
     * @param {string} mnemonic - The mnemonic phrase to validate
     * @returns {boolean} Is the mnemonic phrase valid
     */
    static validateMnemonic: (mnemonic: string) => boolean;
    /**
     * Converts the mnemonic phrase to an old Nano seed
     *
     * @param {string} mnemonic Mnemonic phrase separated by spaces
     */
    static mnemonicToLegacySeed: (mnemonic: string) => string;
    /**
     * Converts the mnemonic phrase to a BIP39 seed
     *
     * @param {string} mnemonic Mnemonic phrase separated by spaces
     */
    static mnemonicToSeed: (mnemonic: string, password: string) => string;
    private static randomHex;
    private static calculateChecksum;
}
interface MnemonicSeed {
    mnemonic: string;
    seed: string;
}
export {};
