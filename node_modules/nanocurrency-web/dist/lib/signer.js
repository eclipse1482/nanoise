"use strict";
//@ts-ignore
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var blakejs_1 = require("blakejs");
var ed25519_1 = __importDefault(require("./ed25519"));
var convert_1 = __importDefault(require("./util/convert"));
var Signer = /** @class */ (function () {
    function Signer() {
    }
    var _a;
    _a = Signer;
    /**
     * Signs any data using the ed25519 signature system
     *
     * @param privateKey Private key to sign the data with
     * @param data Data to sign
     */
    Signer.sign = function (privateKey) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        var signature = new ed25519_1.default().sign(_a.generateHash(data), convert_1.default.hex2ab(privateKey));
        return convert_1.default.ab2hex(signature);
    };
    /**
     * Verify the signature with a public key
     *
     * @param publicKey Public key to verify the data with
     * @param signature Signature to verify
     * @param data Data to verify
     */
    Signer.verify = function (publicKey, signature) {
        var data = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            data[_i - 2] = arguments[_i];
        }
        return new ed25519_1.default().verify(_a.generateHash(data), convert_1.default.hex2ab(publicKey), convert_1.default.hex2ab(signature));
    };
    /**
     * Creates a blake2b hash of the input data
     *
     * @param data Data to hash
     */
    Signer.generateHash = function (data) {
        var ctx = (0, blakejs_1.blake2bInit)(32, undefined);
        data.forEach(function (str) { return (0, blakejs_1.blake2bUpdate)(ctx, convert_1.default.hex2ab(str)); });
        return (0, blakejs_1.blake2bFinal)(ctx);
    };
    return Signer;
}());
exports.default = Signer;
