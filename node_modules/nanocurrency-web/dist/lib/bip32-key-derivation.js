"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
//@ts-ignore
var crypto_js_1 = require("crypto-js");
var convert_1 = __importDefault(require("./util/convert"));
var ED25519_CURVE = 'ed25519 seed';
var HARDENED_OFFSET = 0x80000000;
var Bip32KeyDerivation = /** @class */ (function () {
    function Bip32KeyDerivation() {
    }
    var _a;
    _a = Bip32KeyDerivation;
    Bip32KeyDerivation.derivePath = function (path, seed) {
        var _b = _a.getKeyFromSeed(seed), key = _b.key, chainCode = _b.chainCode;
        var segments = path
            .split('/')
            .map(function (v) { return v.replace('\'', ''); })
            .map(function (el) { return parseInt(el, 10); });
        return segments.reduce(function (parentKeys, segment) {
            return _a.CKDPriv(parentKeys, segment + HARDENED_OFFSET);
        }, { key: key, chainCode: chainCode });
    };
    Bip32KeyDerivation.getKeyFromSeed = function (seed) {
        return _a.derive(crypto_js_1.enc.Hex.parse(seed), crypto_js_1.enc.Utf8.parse(ED25519_CURVE));
    };
    Bip32KeyDerivation.CKDPriv = function (_b, index) {
        var key = _b.key, chainCode = _b.chainCode;
        var ib = [];
        ib.push((index >> 24) & 0xff);
        ib.push((index >> 16) & 0xff);
        ib.push((index >> 8) & 0xff);
        ib.push(index & 0xff);
        var data = '00' + key + convert_1.default.ab2hex(new Uint8Array(ib).buffer);
        return _a.derive(crypto_js_1.enc.Hex.parse(data), crypto_js_1.enc.Hex.parse(chainCode));
    };
    Bip32KeyDerivation.derive = function (data, base) {
        var hmac = crypto_js_1.algo.HMAC.create(crypto_js_1.algo.SHA512, base);
        var I = hmac.update(data).finalize().toString();
        var IL = I.slice(0, I.length / 2);
        var IR = I.slice(I.length / 2);
        return {
            key: IL,
            chainCode: IR,
        };
    };
    return Bip32KeyDerivation;
}());
exports.default = Bip32KeyDerivation;
