"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var Convert = /** @class */ (function () {
    function Convert() {
    }
    /**
     * Convert a string (UTF-8 encoded) to a byte array
     *
     * @param {String} str UTF-8 encoded string
     * @return {Uint8Array} Byte array
     */
    Convert.str2bin = function (str) {
        str = str.replace(/\r\n/g, '\n');
        var bin = new Uint8Array(str.length * 3);
        var p = 0;
        for (var i = 0, len = str.length; i < len; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                bin[p++] = c;
            }
            else if (c < 2048) {
                bin[p++] = (c >>> 6) | 192;
                bin[p++] = (c & 63) | 128;
            }
            else {
                bin[p++] = (c >>> 12) | 224;
                bin[p++] = ((c >>> 6) & 63) | 128;
                bin[p++] = (c & 63) | 128;
            }
        }
        return bin.subarray(0, p);
    };
    /**
     * Convert a byte array to a UTF-8 encoded string
     *
     * @param {Uint8Array} arr Byte array
     * @return {string} UTF-8 encoded string
     */
    Convert.encodeUTF8 = function (arr) {
        var s = [];
        for (var i = 0; i < arr.length; i++) {
            s.push(String.fromCharCode(arr[i]));
        }
        return decodeURIComponent(escape(s.join('')));
    };
    /**
     * Convert a UTF-8 encoded string to a byte array
     *
     * @param {string} str UTF-8 encoded string
     * @return {Uint8Array} Byte array
     */
    Convert.decodeUTF8 = function (str) {
        if (typeof str !== 'string') {
            throw new TypeError('expected string');
        }
        var d = unescape(encodeURIComponent(str));
        var b = new Uint8Array(d.length);
        for (var i = 0; i < d.length; i++) {
            b[i] = d.charCodeAt(i);
        }
        return b;
    };
    /**
     * Convert Array of 8 bytes (int64) to hex string
     *
     * @param {Uint8Array} bin Array of bytes
     * @return {String} Hex encoded string
     */
    Convert.ab2hex = function (buf) {
        return Array.prototype.map.call(new Uint8Array(buf), function (x) { return ('00' + x.toString(16)).slice(-2); }).join('');
    };
    /**
     * Convert hex string to array of 8 bytes (int64)
     *
     * @param {String} bin Array of bytes
     * @return {Uint8Array} Array of 8 bytes (int64)
     */
    Convert.hex2ab = function (hex) {
        var ab = [];
        for (var i = 0; i < hex.length; i += 2) {
            ab.push(parseInt(hex.substr(i, 2), 16));
        }
        return new Uint8Array(ab);
    };
    /**
     * Convert a decimal number to hex string
     *
     * @param {String} str Decimal to be converted
     * @param {Number} bytes Length of the output to be padded
     * @returns Hexadecimal representation of the inputed decimal
     */
    Convert.dec2hex = function (str, bytes) {
        var decimals = str.toString().split('');
        var sum = [];
        var hex = [];
        var i;
        var s;
        while (decimals.length) {
            s = 1 * +decimals.shift();
            for (i = 0; s || i < sum.length; i++) {
                s += (sum[i] || 0) * 10;
                sum[i] = s % 16;
                s = (s - sum[i]) / 16;
            }
        }
        while (sum.length) {
            hex.push(sum.pop().toString(16));
        }
        var joined = hex.join('');
        if (joined.length % 2 != 0) {
            joined = '0' + joined;
        }
        if (bytes > joined.length / 2) {
            var diff = bytes - joined.length / 2;
            for (var i_1 = 0; i_1 < diff; i_1++) {
                joined = '00' + joined;
            }
        }
        return joined;
    };
    Convert.dec2bin = function (dec) {
        return (dec >>> 0).toString(2);
    };
    Convert.bytesToHexString = function (bytes) {
        return __spreadArray([], __read(bytes), false).map(function (b) { return b.toString(16).padStart(2, '0'); }).join('');
    };
    Convert.hexStringToBinary = function (hex) {
        return __spreadArray([], __read(hex), false).map(function (c) { return (Convert.dec2bin(parseInt(c, 16))).padStart(4, '0'); }).join('');
    };
    Convert.binaryToHexString = function (bin) {
        return parseInt(bin, 2).toString(16);
    };
    Convert.stringToHex = function (str) {
        return __spreadArray([], __read(str), false).map(function (c) { return c.charCodeAt(0).toString(16); }).join('');
    };
    return Convert;
}());
exports.default = Convert;
