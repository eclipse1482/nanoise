"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var address_importer_1 = __importDefault(require("./address-importer"));
var bip39_mnemonic_1 = __importDefault(require("./bip39-mnemonic"));
var AddressGenerator = /** @class */ (function () {
    function AddressGenerator() {
    }
    /**
     * Generates a hierarchial deterministic BIP32/39/44 wallet
     *
     * @param {string} [entropy] - (Optional) Custom entropy if the caller doesn't want a default generated entropy
     * @param {string} [seedPassword] - (Optional) Password for the seed
     */
    AddressGenerator.generateWallet = function (entropy, seedPassword) {
        if (entropy === void 0) { entropy = ''; }
        if (seedPassword === void 0) { seedPassword = ''; }
        var mnemonicSeed = bip39_mnemonic_1.default.createWallet(entropy, seedPassword);
        var wallet = address_importer_1.default.fromSeed(mnemonicSeed.seed, 0, 0);
        return __assign(__assign({}, wallet), { mnemonic: mnemonicSeed.mnemonic });
    };
    /**
     * Generates a legacy Nano wallet
     */
    AddressGenerator.generateLegacyWallet = function (seed) {
        var mnemonicSeed = bip39_mnemonic_1.default.createLegacyWallet(seed);
        return address_importer_1.default.fromLegacySeed(mnemonicSeed.seed, 0, 0, mnemonicSeed.mnemonic);
    };
    return AddressGenerator;
}());
exports.default = AddressGenerator;
